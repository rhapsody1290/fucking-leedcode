/**
The string"PAYPALISHIRING"is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P   A   H   N
A P L S I I G
Y   I   R
And then read line by line:"PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:
string convert(string text, int nRows);
convert("PAYPALISHIRING", 3)should return"PAHNAPLSIIGYIR".
**/

/**
Key point:

i=0      0<--- l1 --->  6
i=1      1<--l2--> 5    7
i=2      2    4         8
i=3      3              9

l1 = 2 * nRows - 2           （nRows > 1成立）
l2 = 2 * (nRows - i - 1)     （nRows > 1成立）

1、每一层都遵循间隔为l1的规则
2、除了第一层（i=0）和最后一层(i=s.length()-1)，中间层还遵循l2的规则
3、边界条件考虑nRows=1，否则会造成heap溢出
**/

public class Solution {
    public String convert(String s, int nRows) {
        
        if (nRows <= 1)
            return s;
        
        int i, j;
        StringBuilder sb = new StringBuilder();
        
        //遍历行
        for (i = 0; i < nRows; i++){
            
            j = i;
            //遍历列
            while (j < s.length()){
            
                //固定添加，l1规则
                sb.append(s.charAt(j));
                //中间行的额外添加，l2规则
                if (i > 0 && i < nRows - 1){
                    if (j + 2 * (nRows - i - 1) < s.length()){
                          //l2规则
                		  sb.append(s.charAt(j + 2 * (nRows - i - 1)));
                    }
            	  }
                //l1规则
                j += 2 * nRows - 2;
            }
        }
        
        return sb.toString();
    }
}

