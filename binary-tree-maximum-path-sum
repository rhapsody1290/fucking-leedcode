    https://leetcode.com/problems/binary-tree-maximum-path-sum/#/description
    
    /*binary-tree-maximum-path-sum*/
    /*
    Given a binary tree, find the maximum path sum.
    The path may start and end at any node in the tree.
    For example:
    Given the below binary tree,
       1
      / \
     2   3

    Return6.
     */
     
    /*
    KEY: 递归定义选出通过node的单侧最大值，遍历过程进行全局变量更新
    */
    private static int maxPathSum = Integer.MIN_VALUE;
    public static int maxPathSum(TreeNode root) {

        helper(root);
        return maxPathSum;
    }

    //遍历选出通过node的单侧最大值
    private static int helper(TreeNode root){

        if (root == null)
            return 0;
        
        //后序遍历
        int maxLeft = helper(root.left);
        int maxRight = helper(root.right);

        //更新全局
        int max = root.val;
        max = maxLeft > 0 ? maxLeft + max : max;
        max = maxRight > 0 ? maxRight + max : max;
        maxPathSum = max > maxPathSum ? max : maxPathSum;

        //max(1, 1-2, 1-3)
        return Math.max(root.val, Math.max(maxLeft + root.val, maxRight + root.val));
    }
